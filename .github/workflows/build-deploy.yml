name: Build and Deploy Code

# on:
#   push:
#     branches:
#       - "main"
#   pull_request:
#     branches:
#       - "test_branch"

# trigger action on push or pull request
on: [push, pull_request]

# create the job upon initial trigger
jobs:
  build:
    # referencing environment variables set in the github actions
    environment:
      # https://github.com/adnandmth/python_api/settings/environments/1957271115/edit
      name: testing 
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DATABASE: ${{secrets.DATABASE_NAME}}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    # practically you can select other OS as well
    runs-on: ubuntu-latest 
    steps:
      # pulling all of the files available in the repo
      - name: pulling git repo
        # from checkout github marketplace
        uses: actions/checkout@v4 

      # install python -> base language of the app
      - name: Install python version 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      # update pip to get most recent version
      - name: update pip
        run: python -m pip install --upgrade pip

      # install dependencies using the requirements.txt file in the repo
      - name: install all dependencies
        run: pip install -r requirements.txt

      # run the test classes
      - name: test with pytest
        run: pip install pytest
          pytest

      # # docker container process starts here
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{secrets.DOCKER_HUB_USERNAME}}
      #     password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v3

      # # build and push
      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v5
      #   with:
      #     # root directory of the repo
      #     context: ./ 
      #     # DockerFile file available in the repo
      #     file: ./Dockerfile 
      #     builder: ${{steps.buildx.outputs.name}}
      #     push: true
      #     # pointing out to remote docker registry
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/pythonapi:latest 
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache
      # - name: Image digest
      #   run: echo ${{steps.docker_build.outputs.digest}}

  # deploy:
  #   runs-on: ubuntu-latest
  #   # indicates github that the job by the name of "build" must be completed
  #   # first before running the deploy job
  #   needs: [build]
  #   environment:
  #     name: production
  #   steps:
  #     - name: pulling git repo
  #       uses: actions/checkout@v2
  #     - name: deploying to Heroku
  #       uses: akhileshns/heroku-deploy@v3.12.14 # This is the action
  #       with:
  #         heroku_api_key: ${{secrets.HEROKU_API_KEY}}
  #         heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
  #         heroku_email: ${{secrets.HEROKU_EMAIL}}